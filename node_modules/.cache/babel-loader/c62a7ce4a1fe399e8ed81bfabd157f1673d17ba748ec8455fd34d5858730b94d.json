{"ast":null,"code":"export default class Api {\n  constructor(_ref) {\n    let {\n      initialUrl,\n      headers\n    } = _ref;\n    this.initialUrl = initialUrl;\n    this.headers = headers;\n  }\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n  getInitialCards() {\n    //     получить список всех карточек в виде массива (GET)\n    return fetch(`${this.initialUrl}/cards`, {\n      method: 'GET',\n      headers: this.headers\n    }).then(res => this._getResponseData(res));\n  }\n\n  //добавить карточку (POST)\n  addCard(cardData) {\n    return fetch(`${this.initialUrl}/cards`, {\n      method: 'POST',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: cardData.name,\n        link: cardData.link\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  // добавить лайк карточки (PUT)\n  addLike(cardId) {\n    return fetch(`${this.initialUrl}/cards/likes/${cardId}`, {\n      method: 'PUT',\n      headers: this.headers\n    }).then(res => this._getResponseData(res));\n  }\n\n  // удалить лайк карточки (DELETE)\n  deleteLike(cardId) {\n    return fetch(`${this.initialUrl}/cards/likes/${cardId}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => this._getResponseData(res));\n  }\n\n  //удалить карточку (DELETE)\n  deleteCard(cardId) {\n    return fetch(`${this.initialUrl}/cards/${cardId}`, {\n      method: 'DELETE',\n      headers: this.headers\n    }).then(res => this._getResponseData(res)).catch(err => {\n      console.log(err); // выведем ошибку в консоль\n    });\n  }\n\n  // получить данные пользователя (GET)\n  getUserData() {\n    return fetch(`${this.initialUrl}/users/me`, {\n      method: 'GET',\n      headers: this.headers\n    }).then(res => this._getResponseData(res));\n  }\n\n  // заменить данные пользователя (PATCH)\n  changeUserData(_ref2) {\n    let {\n      fullname,\n      about\n    } = _ref2;\n    return fetch(`${this.initialUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        name: fullname,\n        about: about\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  // заменить аватар (PATCH)\n  changeUserAvatar(_ref3) {\n    let {\n      link\n    } = _ref3;\n    return fetch(`${this.initialUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this.headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    }).then(res => this._getResponseData(res));\n  }\n}\nconst serverUrl = `https://mesto.nomoreparties.co/v1/cohort-63`;\nconst headers = {\n  authorization: 'de07f66c-c750-40f7-a9ca-9c10f4545ed6',\n  'Content-Type': 'application/json; charset=UTF-8'\n};\nexport const api = new Api({\n  initialUrl: serverUrl,\n  headers: headers\n});","map":{"version":3,"names":["Api","constructor","_ref","initialUrl","headers","_getResponseData","res","ok","Promise","reject","status","json","getInitialCards","fetch","method","then","addCard","cardData","body","JSON","stringify","name","link","addLike","cardId","deleteLike","deleteCard","catch","err","console","log","getUserData","changeUserData","_ref2","fullname","about","changeUserAvatar","_ref3","avatar","serverUrl","authorization","api"],"sources":["/home/dima/dev/mesto-react/src/utils/Api.js"],"sourcesContent":["export default class Api {\n    constructor({initialUrl, headers}) {\n        this.initialUrl = initialUrl;\n        this.headers = headers;\n    }\n\n    _getResponseData(res) {\n        if (!res.ok) {\n            return Promise.reject(`Ошибка: ${res.status}`);\n        }\n        return res.json();\n    }\n\n    getInitialCards() {\n        //     получить список всех карточек в виде массива (GET)\n        return fetch(`${this.initialUrl}/cards`, {\n            method: 'GET',\n            headers: this.headers\n        })\n            .then(res => this._getResponseData(res));\n    }\n\n//добавить карточку (POST)\n    addCard(cardData) {\n        return fetch(`${this.initialUrl}/cards`, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify({\n                name: cardData.name,\n                link: cardData.link,\n            }),\n        })\n            .then(res => this._getResponseData(res));\n    }\n\n    // добавить лайк карточки (PUT)\n    addLike(cardId) {\n        return fetch(`${this.initialUrl}/cards/likes/${cardId}`, {\n            method: 'PUT',\n            headers: this.headers,\n        })\n            .then(res => this._getResponseData(res));\n    }\n\n// удалить лайк карточки (DELETE)\n    deleteLike(cardId) {\n        return fetch(`${this.initialUrl}/cards/likes/${cardId}`, {\n            method: 'DELETE',\n            headers: this.headers,\n        })\n            .then(res => this._getResponseData(res));\n    }\n\n//удалить карточку (DELETE)\n    deleteCard(cardId) {\n        return fetch(`${this.initialUrl}/cards/${cardId}`, {\n            method: 'DELETE',\n            headers: this.headers,\n        })\n            .then(res => this._getResponseData(res))\n            .catch((err) => {\n                console.log(err); // выведем ошибку в консоль\n            });\n    }\n\n// получить данные пользователя (GET)\n    getUserData() {\n        return fetch(`${this.initialUrl}/users/me`, {\n            method: 'GET',\n            headers: this.headers,\n        })\n            .then(res => this._getResponseData(res))\n    }\n\n// заменить данные пользователя (PATCH)\n    changeUserData({fullname, about}) {\n        return fetch(`${this.initialUrl}/users/me`, {\n            method: 'PATCH',\n            headers: this.headers,\n            body: JSON.stringify({\n                name: fullname,\n                about: about,\n            }),\n        })\n            .then(res => this._getResponseData(res))\n    }\n\n// заменить аватар (PATCH)\n    changeUserAvatar({link}) {\n        return fetch(`${this.initialUrl}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this.headers,\n            body: JSON.stringify({\n                avatar: link,\n            }),\n        })\n            .then(res => this._getResponseData(res))\n    }\n}\n\nconst serverUrl = `https://mesto.nomoreparties.co/v1/cohort-63`;\nconst headers = {\n    authorization: 'de07f66c-c750-40f7-a9ca-9c10f4545ed6',\n    'Content-Type': 'application/json; charset=UTF-8'\n};\nexport const api = new Api({initialUrl: serverUrl, headers: headers});\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}